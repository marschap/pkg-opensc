From 466e2b7c23e25e499ae01131eba8fe9aa5b30fdf Mon Sep 17 00:00:00 2001
From: Peter Marschall <peter@adpm.de>
Date: Sat, 26 Mar 2011 17:40:57 +0100
Subject: [PATCH 10/15] OpenPGP: catch calloc() errors in pgp_new_blob()

Detect and react on out of memory errors in pgp_new_blob() and its callers.
---
 src/libopensc/card-openpgp.c |   42 +++++++++++++++++++++++++++---------------
 1 files changed, 27 insertions(+), 15 deletions(-)

diff --git a/src/libopensc/card-openpgp.c b/src/libopensc/card-openpgp.c
index b1fa41e..ca6ca3e 100644
--- a/src/libopensc/card-openpgp.c
+++ b/src/libopensc/card-openpgp.c
@@ -83,6 +83,7 @@ struct do_info {
 	int		(*put_fn)(sc_card_t *, unsigned int, const u8 *, size_t);
 };
 
+static int		pgp_finish(sc_card_t *card);
 static void		pgp_iterate_blobs(struct blob *, int, void (*func)());
 
 static struct blob *	pgp_new_blob(struct blob *, unsigned int, int,
@@ -148,6 +149,7 @@ pgp_init(sc_card_t *card)
 	sc_file_t	*file = NULL;
 	struct do_info	*info;
 	int		r;
+	struct blob 	*child;
 
 	priv = calloc (1, sizeof *priv);
 	if (!priv)
@@ -198,14 +200,23 @@ pgp_init(sc_card_t *card)
 
 	priv->current = priv->mf;
 
-	/* Populate MF - add all blobs listed in the pgp_objects
-	 * table. */
+	/* Populate MF - add all blobs listed in the pgp_objects table. */
 	for (info = pgp_objects; info->id > 0; info++) {
-		pgp_new_blob(priv->mf, info->id,
+		child = pgp_new_blob(priv->mf, info->id,
 			  	info->constructed? SC_FILE_TYPE_DF
 					  	 : SC_FILE_TYPE_WORKING_EF,
 				info);
+		/* catch out of memory condition */
+		if (child == NULL)
+			break;
+	}
+
+	/* treat out of memory condition */
+	if (child == NULL) {
+		pgp_finish(card);
+		return SC_ERROR_OUT_OF_MEMORY;
 	}
+
 	return SC_SUCCESS;
 }
 
@@ -259,20 +270,21 @@ pgp_new_blob(struct blob *parent, unsigned int file_id,
 	sc_file_t	*file = sc_file_new();
 	struct blob	*blob, **p;
 
-	blob = calloc(1, sizeof(*blob));
-	blob->parent = parent;
-	blob->id     = file_id;
-	blob->file   = file;
-	blob->info   = info;
+	if ((blob = calloc(1, sizeof(*blob))) != NULL) {
+		blob->parent = parent;
+		blob->id     = file_id;
+		blob->file   = file;
+		blob->info   = info;
 
-	file->type   = file_type;
-	file->path   = parent->file->path;
-	file->ef_structure = SC_FILE_EF_TRANSPARENT;
-	sc_append_file_id(&file->path, file_id);
+		file->type   = file_type;
+		file->path   = parent->file->path;
+		file->ef_structure = SC_FILE_EF_TRANSPARENT;
+		sc_append_file_id(&file->path, file_id);
 
-	for (p = &parent->files; *p; p = &(*p)->next)
-		;
-	*p = blob;
+		for (p = &parent->files; *p; p = &(*p)->next)
+			;
+		*p = blob;
+	}
 
 	return blob;
 }
-- 
1.7.4.1

