'\" t
.\"     Title: sc_wait_for_event
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.75.1 <http://docbook.sf.net/>
.\"      Date: 12/18/2009
.\"    Manual: OpenSC API reference
.\"    Source: opensc
.\"  Language: English
.\"
.TH "SC_WAIT_FOR_EVENT" "3" "12/18/2009" "opensc" "OpenSC API reference"
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
sc_wait_for_event \- Wait for an event on a smart card reader
.SH "SYNOPSIS"
.PP

.sp
.if n \{\
.RS 4
.\}
.nf
#include <opensc\&.h>

int sc_wait_for_event(sc_reader_t *readers[], int slots[], size_t numslots,
                      unsigned int event_mask,
                      int *reader, unsigned int *event, int timeout);
		
.fi
.if n \{\
.RE
.\}
.sp
.SH "DESCRIPTION"
.PP
This function blocks until an event occurs on any of the readers/slots specified\&. The
\fIreaders\fR
and
\fIslots\fR
fields list the readers and respective slots to be watched\&.
\fInum_slots\fR
holds the total number of slots passed\&. The
\fIevent_mask\fR
parameter specifies the types of events to wait for\&. This may be a combination of the following flags:
.PP
SC_EVENT_CARD_REMOVED
.RS 4
A card was removed from the reader/slot\&.
.RE
.PP
SC_EVENT_CARD_INSERTED
.RS 4
A card was inserted into the reader/slot\&.
.RE
.PP
On returning, the
\fIreader\fR
parameter holds the reader which generated an event, and
\fIevent\fR
holds the event flag, as in
\fIevent_mask\fR\&.
.PP
The timeout parameter may be used to specify the maximum amount of time to wait for an event, in milliseconds\&. This may be set to \-1 to wait forever\&.
.SH "RETURN VALUE"
.PP
Returns 0 if successful, 1 if a timeout occurred, or a negative value in case of error\&.
