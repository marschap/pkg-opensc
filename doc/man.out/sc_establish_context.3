'\" t
.\"     Title: sc_establish_context
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.75.1 <http://docbook.sf.net/>
.\"      Date: 02/16/2010
.\"    Manual: OpenSC API reference
.\"    Source: opensc
.\"  Language: English
.\"
.TH "SC_ESTABLISH_CONTEXT" "3" "02/16/2010" "opensc" "OpenSC API reference"
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
sc_establish_context \- Establish an OpenSC context
.SH "SYNOPSIS"
.PP

.sp
.if n \{\
.RS 4
.\}
.nf
#include <opensc\&.h>

int sc_establish_context(sc_context_t **ctx,
                         const char *appname);
		
.fi
.if n \{\
.RE
.\}
.sp
.SH "DESCRIPTION"
.PP
This function establishes an OpenSC context\&. This context is required in all subsequent calls to OpenSC functions\&.
.PP

\fIctx\fR
is a pointer to a pointer that will receive the allocated context\&.
.PP

\fIappname\fR
is a string that identifies the application\&. This string will be used to apply application\-specific settings from the opensc\&.conf configuration file\&. If NULL is passed, only the settings specified in the default section apply; otherwise, settings from the section identified by
\fIappname\fR
will be applied as well\&.
.PP
The
sc_context
structure contains the following members:
.PP

.sp
.if n \{\
.RS 4
.\}
.nf
#define SC_MAX_READERS			16

typedef struct sc_context {
	struct sc_reader *reader[SC_MAX_READERS];
	int reader_count;
} sc_context_t;
			
.fi
.if n \{\
.RE
.\}
.PP
The
\fIreader_count\fR
field contains the number of readers found\&. Information on the individual card readers is stored in
\fIsc_reader\fR
objects, defined as follows:
.PP

.sp
.if n \{\
.RS 4
.\}
.nf
typedef struct sc_reader {
	char *name;
	int slot_count;
}; sc_reader_t;
				
.fi
.if n \{\
.RE
.\}
.PP
In this structure,
\fIname\fR
contains a printable name of the reader, and
\fIslot_count\fR
has the number of slots supported by this device\&.
.SH "RETURN VALUE"
.PP
Returns 0 if successful, or a negative value in case of error\&.
